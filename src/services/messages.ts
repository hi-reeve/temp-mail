// Generated by https://quicktype.io

import type { MaybeRef } from '@vueuse/core';
import { $http } from '.';

export interface Messages {
    'hydra:member': HydraMember[];
    'hydra:totalItems': number;
    'hydra:view': { [key: string]: string };
    'hydra:search': HydraSearch;
}

export interface HydraMember {
    '@id': string;
    '@type': string;
    '@context': string;
    id: string;
    accountId: string;
    msgid: string;
    from: From;
    to: From[];
    subject: string;
    intro: string;
    seen: boolean;
    isDeleted: boolean;
    hasAttachments: boolean;
    size: number;
    downloadUrl: string;
    createdAt: string;
    updatedAt: string;
}

export interface From {
    name: string;
    address: string;
}

export interface HydraSearch {
    '@type': string;
    'hydra:template': string;
    'hydra:variableRepresentation': string;
    'hydra:mapping': HydraMapping[];
}

export interface HydraMapping {
    '@type': string;
    variable: string;
    property: string;
    required: boolean;
}

export class MessagesServices {
    static all() {
        return $http.get<Messages>(`/messages`);
    }
}

export const messagesKey = {
    default: ['messages'] as const,
    all: (accountId: MaybeRef<string>) => [
        ...messagesKey.default,
        { accountId },
    ],
};
