// Generated by https://quicktype.io

import type { MaybeRef } from '@vueuse/core';
import { $http } from '.';

export interface Message {
    'hydra:member': HydraMember[];
    'hydra:totalItems': number;
    'hydra:view': { [key: string]: string };
    'hydra:search': HydraSearch;
}

export interface HydraMember {
    '@id': string;
    '@type': string;
    '@context': string;
    id: string;
    accountId: string;
    msgid: string;
    from: From;
    to: From[];
    subject: string;
    intro: string;
    seen: boolean;
    isDeleted: boolean;
    hasAttachments: boolean;
    size: number;
    downloadUrl: string;
    createdAt: string;
    updatedAt: string;
}

export interface From {
    name: string;
    address: string;
}

export interface HydraSearch {
    '@type': string;
    'hydra:template': string;
    'hydra:variableRepresentation': string;
    'hydra:mapping': HydraMapping[];
}

export interface HydraMapping {
    '@type': string;
    variable: string;
    property: string;
    required: boolean;
}
// Generated by https://quicktype.io

export interface SingleMessage {
    '@context': string;
    '@id': string;
    '@type': string;
    id: string;
    accountId: string;
    msgid: string;
    from: From;
    to: From[];
    cc: string[];
    bcc: string[];
    subject: string;
    seen: boolean;
    flagged: boolean;
    isDeleted: boolean;
    verifications: string[];
    retention: boolean;
    retentionDate: string;
    text: string;
    html: string[];
    hasAttachments: boolean;
    attachments: Attachment[];
    size: number;
    downloadUrl: string;
    createdAt: string;
    updatedAt: string;
}

export interface Attachment {
    id: string;
    filename: string;
    contentType: string;
    disposition: string;
    transferEncoding: string;
    related: boolean;
    size: number;
    downloadUrl: string;
}

export interface From {
    name: string;
    address: string;
}

export class MessagesServices {
    static all() {
        return $http.get<Message>(`/messages`);
    }
    static findById(id: string) {
        return $http.get<SingleMessage>(`/messages/${id}`);
    }
    static patchMessage(id: string) {
        return $http.patch(`/messages/${id}`);
    }
}

export const messagesKey = {
    default: ['messages'] as const,
    all: (accountId: MaybeRef<string>) => [
        ...messagesKey.default,
        { accountId },
    ],
    byId: (id: MaybeRef<string>) => [...messagesKey.default, { id }],
};
